<?php

/**
 * Implementation of hook_init().
 */
function node_publish_tools_init() {
   $path = drupal_get_path('module', 'node_publish_tools');
   drupal_add_css($path .'/node_publish_tools.css');

}

/**
 * Implementation of hook_help()
 */
function node_publish_tools_help($path, $args) {
  if ($path == 'admin/help#node-publish-tools') {
    $output = '<p>Ads some node addons like the ability for referenced user to have same permission over nodes as creators</p>';
    return $output;
  }
}

/**
 * Implementation of hook_perm()
 */
function node_publish_tools_perm() {
	return array('allow referenced access',  'administer access to node publish tool');
}
/**
 * Implementation of hook_menu()
 */
function node_publish_tools_menu() {
  $items['admin/settings/node_publish_tools/shared_premissions'] = array(
    'title' => 'Node Publish Tools',
    'description' => 'Configure the node publish tools.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_publish_tools_settings_form'),
    'access arguments' => array('administer access to node publish tool'),
    'file' => 'node_publish_tools.admin.inc',
  );
  $items['node/%node/node-publish-tools/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_publish_tools_delete_node', 1),
    'access callback' => 'node_publish_tools_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
	
	/*$items['node/%/publish'] = array(
		'title' => 'Node published',
		'page callback' => 'node_publish_tools_publish',
		'page arguments' => array(1),
		'access arguments' => array('administer access to node publish tool'),
		'type' => MENU_CALLBACK,
	);/**/
  return $items;
}


function node_publish_tools_publish($nid) {	
	// print_r($nid);
	$node = node_load($nid);	
	
  if (is_numeric($nid)) {	
	  if ($node->status == 0) {
			$node->status = 1;
			node_save($node);			
			db_query("UPDATE {node} SET status = 1 WHERE nid = %d", $nid); 
						
		} elseif ($node->status == 1) {
			$node->status = 0;
			node_save($node);			
			db_query("UPDATE {node} SET status = 0 WHERE nid = %d", $nid); 
		}
	} 
	
	if (isset($_REQUEST['destination'])) {
		drupal_goto($_REQUEST['destination']);
	}
	else {
		drupal_goto('node/'.$nid);
	}
	
}



function node_publish_tools_form_alter(&$form, $form_state, $form_id) {

	global $user;
		global $base_url;
		 
		if (strstr($form_id, '_node_form') && $form['nid']['#value'] != '' && $form['options']['status']['#default_value'] == 0) {
			if (user_access('administer access to node publish tool')) {
				$links = array(
				'#type' => 'button',
				'#value' => 'Publish',
				'#submit' => FALSE,
				'#attributes' => array(
				'onclick' => 'return false;',
				'style' => 'display:none;',
			),
			);
			drupal_add_js('$(document).ready(function() {
				$("#edit-publish").show();
				$("#edit-publish").click(function() {
				window.location = "'. $base_url .'/node/'. arg(1) .'/publish";
				return false;
				});
				});', 'inline', 'footer');
			}			
		}
}

/**
 *	Function to determine if the user is a referenced user of a given node
 *
 *	@param $user (Object)
 *		User to check
 *
 *	@param $node (Object)
 *		Node that contains referenced field
 *
 *	@return TRUE if user is referenced in the node
 */
function _node_publish_tools_is_referenced($user, $node) {
	// find field with referenced user
	$reference_field = ' ';
	$type_info = content_types($node->type);
	foreach($type_info['fields'] as $field) {
		if ($field['type'] == 'userreference') {
			$reference_field = $field['field_name'];
		}
	}
	// save referenced user uid
	$node = (array)$node;
	$referenced_uid = $node[$reference_field][0]['uid'];
	// if node owner or referenced user
	if ($user->uid == $referenced_uid && user_access('allow referenced access', user_load($referenced_uid)))
		return true;
	return false;
}

/**
 *	Function to determine if the user is the owner of a node
 *
 *	@param $user (Object)
 *		User to check
 *
 *	@param $node (Object)
 *		Node to use for user check
 *
 *	@return TRUE if user owns the node
 */
function _node_publish_tools_is_owner($user, $node) {
	if ($user->uid == $node->uid && node_access('delete', $node))
		return true;
	return false;
}

function node_publish_tools_access($node) {
	global $user;
	return _node_publish_tools_is_referenced($user, $node) || _node_publish_tools_is_owner($user, $node) || user_access('administer access to node publish tool');
}

/**
 * Implementation of hook_link() on behalf of the node module.
 */
function node_publish_tools_link($type, $object) {
	global $user;
 	$links = array();
	if ($type == 'node') {
		if (!function_exists('node_preview')) {
			// get all types that allows reference access				
			$types = variable_get('shared_permission_types', array());
       
			drupal_set_message('Referenced: '._node_publish_tools_is_referenced($user, $object));
			drupal_set_message('Owner: '._node_publish_tools_is_owner($user, $object));
		  drupal_set_message('Admin: '.user_access('administer access to node publish tool'));
			 
			// do if a referenced content type as per settings form
			if ($type != null){
				if (in_array($object->type, $types)) {
					// if node owner or referenced user
					if (_node_publish_tools_is_referenced($user, $object) || _node_publish_tools_is_owner($user, $object) || user_access('administer access to node publish tool')) {
						// get path to image
						$path = drupal_get_path('module', 'node_publish_tools');
							
						/*$image_publish = '';
						if ($object->status == 1) {
							$image_publish = theme_image($path.'/icons/publish.png');
						} else {
							$image_publish = theme_image($path.'/icons/unpublish.png');
						}			
						$links['node-unpublish'] = array(
							'title' => $image_publish,						
							'href' => "node/{$object->nid}/publish",						
							// 'attributes' => array('class' => 'node-publish-tools-links', ),
							'query' => array('destination' => $_GET['q']),
							'html' => true,
						);/**/						 

						if (node_access('update', $object)) {
							$image_edit = theme_image($path.'/icons/edit.png'); 				 				 
							$links['node-edit'] = array(
								'title' => $image_edit,
								'href' => "node/{$object->nid}/edit",
								// 'attributes' => array('class' => 'node-publish-tools-links'),
								'html' => TRUE,
								'query' => array('destination' => $_GET['q']),
								'html' => true,
							);
						}
						
						$image_delete = theme_image($path.'/icons/delete.png'); 
						$links['node-delete'] = array(
							'title' => $image_delete,
							'href' => 'node/'.$object->nid.'/node-publish-tools/delete',
							// 'attributes' => array('class' => 'node-publish-tools-links'),
							// 'query' => array('destination' => $_GET['q']),
							'html' => true,
						);
					} else {
						// drupal_set_message('Sorry, can\'t edit');
					}	
				}
			}
	  }
	}
	return $links; 
}

function node_publish_tools_delete_node(&$form_state, $node) {
	$form = array();
	$form['nid'] = array(
		'#type' => 'value',
		'#value' => $node->nid
	);
	return confirm_form($form, t('Are you sure you want to delete this reference?'), isset($_GET['destination']) ? $_GET['destination'] : 'node/'. $node->nid, null, t('Remove reference'), t('Cancel'));
}

function node_publish_tools_delete_node_submit($form, &$form_state) {
	if ($form_state['values']['confirm']) {
    node_delete($form_state['values']['nid']);
  }
  $form_state['redirect'] = '<front>';
	// drupal_set_message('Reference was successfully deleted.');
}