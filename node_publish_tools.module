<?php
// $Id$
/**
 * @file
 * 	Ads some node addons like the ability for referenced user to have same permission over nodes as creators
 */

 /**
 * Implementation of hook_init().
 */
function node_publish_tools_init() {
  // Don't do anything if the user has no access.
  if (!user_access('administer access to node publish tool')) {
    return;
  }

   $path = drupal_get_path('module', 'node_publish_tools');
   drupal_add_css($path .'/node_publish_tools.css');

}

/**
 * Implementation of hook_help()
 */
function node_publish_tools_help($path, $args) {
  if ($path == 'admin/help#node-publish-tools') {
    $output = '<p>Ads some node addons like the ability for referenced user to have same permission over nodes as creators</p>';
    return $output;
  }
}

/**
 * Implementation of hook_perm()
 */
function node_publish_tools_perm(){
	return array('allow referenced access', 'see node publish links', 'administer access to node publish tool');
}

/**
 * Implementation of hook_theme().
 */
function node_publish_tools_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'node_publish_tools');
  $items['node_publish_tools'] = array(
    'arguments' => array('links' => array()),
    'template' => 'admin-links',
    'path' => $path,
    'file' => 'theme.inc',
  );
  return $items;
}

/**
 * Implementation of hook_menu()
 */
function node_publish_tools_menu() {
  $items['admin/settings/node_publish_tools/shared_premissions'] = array(
    'title' => 'Node Publish Tools',
    'description' => 'Configure the node publish tools.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_publish_tools_settings_form'),
    'access arguments' => array('administer access to node publish tool'),
    'file' => 'node_publish_tools.admin.inc',
  );
  $items['node/%/node_publish_tools/%'] = array(
    'title' => 'Node Publish Tools',
    'page callback' => 'node_publish_tools_access',
    'page arguments' => array(1,3),
    'access callback' => '_publish_tools_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
	
	$items['node/%/publish'] = array(
		'title' => 'Node published',
		'page callback' => 'node_publish_tools_publish',
		'page arguments' => array(1),
		'access arguments' => array('administer access to node publish tool'),
		'type' => MENU_CALLBACK,
	);
  return $items;
}

function node_publish_tools_publish($nid) {
	if (is_numeric($nid)) {
		db_query("UPDATE {node} SET status = 0 WHERE nid = %d", $nid);
	}
	if (isset($_REQUEST['destination'])) {
		drupal_goto($_REQUEST['destination']);
	}
	else {
		drupal_goto('node/'. $nid);
	}
}

function node_publish_tools_form_alter(&$form, $form_state, $form_id) {

	global $user;
		global $base_url;
		if (strstr($form_id, '_node_form') && $form['nid']['#value'] != '' && $form['options']['status']['#default_value'] == 0) {
			if (user_access('administer access to node publish tool')) {
			$links = array(
			'#type' => 'button',
			'#value' => 'Publish',
			'#submit' => FALSE,
			'#attributes' => array(
			'onclick' => 'return false;',
			'style' => 'display:none;',
			),
			);
			drupal_add_js('$(document).ready(function() {
			$("#edit-publish").show();
			$("#edit-publish").click(function() {
			window.location = "'. $base_url .'/node/'. arg(1) .'/publish";
			return false;
			});
			});', 'inline', 'footer');
			}
		}
}

/**
 * Function to calculate access to menu
 *
 * @return boolean
 *  True if valid
 */
function _node_publish_tools_access($nid) {
  global $user;
  $node = node_load($nid);
  return $user && $user->uid &&
  (
    // The user is not blocked and logged in at least once.
    ($user->access && $user->status && ((user_access('allow referenced access') && $node->uid == $user->uid) || user_access('administer access to node publish tool')))
  );
}

/**
 * Retrieve the admin links for a given object.
 */
function node_publish_tools_get_links($type, $object) {
  $links = array();
	
  if (user_access('administer access to node publish tool')) {
    $links = module_invoke_all('admin_link', $type, $object);
    drupal_alter('admin_link', $links, $type, $object);		
  }
  return $links;
}

/**
 * Implementation of hook_link() on behalf of the node module.
 */
function node_publish_tools_link($type, $object ) {
	global $user;
	$links = array();
	print_r($object->user);
	if ($type == 'node') {
    if (!function_exists('node_preview')) {
			// get all types that allows reference access
			$types = variable_get('node_publish_tools_types', null);
			// do if a referenced content type as per settings form
			if ($types != null)
			if (in_array($object->type, $types)) {
				// find field with referenced user
				$reference_field = ' ';
				$type_info = content_types($object->type);
				foreach($type_info['fields'] as $field) {
					if ($field['type'] == 'userreference') {
						$reference_field = $field['field_name'];
					}
				}
				
				// save referenced user uid
				$node = (array)$object;
				$referenced_uid = $node[$reference_field][0]['uid'];
				
				//print_r($node[$reference_field][0]['uid']);
				
				// if node owner or referenced user
				if (($user->uid == $referenced_uid && user_access('allow referenced access', user_load($referenced_uid))/**/) || ($user->uid == $object->uid && node_access('update', $object) && node_access('delete', $object))) {
					
					// $links['node-publish'] = array(
						// 'title' => t('Publish'),
						// 'href' => "node/{$object->nid}/publish",
						// 'attributes' => array('class' => 'icon-unpublish'),
						// 'query' => array('destination' => $_GET['q']),
					// );
					
					$links['node-edit'] = array(
						'title' => t('Ed<b>it</b>'),
						'href' => "node/{$object->nid}/edit",
						'query' => array('destination' => $_GET['q']),
						'attributes' => array('class' => 'icon-edit'),
						'html' => true
					);

					$links['node-delete'] = array(
						'title' => t('Delete'),
						'href' => "node/{$object->nid}/delete",
						'attributes' => array('class' => 'icon-delete'),
						'query' => array('destination' => $_GET['q']),
					);
					if ($user->uid == $referenced_uid)
						drupal_set_message('Can edit as Referenced user');
					else
						drupal_set_message('Can edit as node owner');
				} else
					drupal_set_message('Sorry, can\'t edit');
				
			}
			/*$form = array();
			// get all content types
			$types = array();
			$reference_node = false;
			foreach (node_get_types('types') as  $type) {
				$types[$type->type] = $type->name;
			}
			// get all types that has user reference fields
			$reference_types = array();
			foreach ($types as $key => $type) {
				$fields = array();
				$type_info = content_types($key);
				foreach($type_info['fields'] as $field) {
					if ($field['type'] == 'userreference')
						$reference_types[$key] = $type;
						$reference_node = true;
				}
			}
			// print_r($object->field_user); //To see vars
      // Check if node is referenced by logged in user
      $referenced = false;
			
      foreach($object->field_user as $reference) {
        global $user;
        if ($user->uid == $reference['uid'])
	        $referenced = true;
      }

      // If the ....
      if (($referenced == true) && ($reference_node == true)) {
        // set the node permissions to allow editing by this user...
        print_r("You are allowed to edit this node");
      }
     
      if (node_access('update', $object)) { //modified this
        $links['node-edit'] = array(
          'title' => t('Edit'),
          'href' => "node/{$object->nid}/edit",
          'attributes' => array('class' => 'icon-edit'),
          'query' => array('destination' => $_GET['q']),
        );
      }
      // if (node_access('delete', $object)) {
      if ((node_access('delete', $object)) || $referenced == true) {
        $links['node-delete'] = array(
          'title' => t('Delete'),
          'href' => "node/{$object->nid}/delete",
          'attributes' => array('class' => 'icon-delete'),
          'query' => array('destination' => $_GET['q']),
        );
			}/**/
		}
	}		
  return $links;
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function node_publish_tools_theme_registry_alter(&$theme_registry) {
  $hooks = array(
      'node',
  );
  foreach ($hooks as $hook) {
    if (empty($theme_registry[$hook]['preprocess functions']) || !in_array('node_publish_tools_preprocess_'. $hook, $theme_registry[$hook]['preprocess functions'])) {
      $theme_registry[$hook]['preprocess functions'][] = 'node_publish_tools_preprocess_'. $hook;
    }
  }
}

/**
 * Implementation of hook_preprocess_node().
 */
function node_publish_tools_preprocess_node(&$vars) {
  $vars['content'] .= theme('node_publish_tools', node_publish_tools_get_links('node', $vars['node']));
}